const FabricCommitment = artifacts.require('FabricCommitment');

const Web3 = require('web3');
//const web3 = new Web3('http://127.0.0.1:7545');

const { decodeEvent, findEvent } = require('./helper');

contract('FabricCommitment', (accounts) => {
  let fabricCommitment;

  // Note: 0x is required: Error: Given value xxx is not a valid hex string
  const hexCommitment =
    '0x0abd010a208b334d5359ef421a72b658894571db7702afbc72f876d8ba2df1665f80feebcd1298010a7c127a0a046c736363122b1a290a21636f6d6d69746d656e742f7b6368616e6e656c7d2f7b706f72747d2f7b7365717d1a04747275651a450a04636f6c6c123d1a3b0a21636f6d6d69746d656e742f7b6368616e6e656c7d2f7b706f72747d2f7b7365717d12160a1456414c49444154494f4e5f504152414d455445521a0308c8012213120764756d6d7943431a0864756d6d7956657222cf060a0c53616d706c654f72674d535012be062d2d2d2d2d424547494e2043455254494649434154452d2d2d2d2d0a4d4949434e7a4343416436674177494241674952414a5a3446385032654e3479634f57473279347270384577436759494b6f5a497a6a3045417749776654454c0a4d416b474131554542684d4356564d78457a415242674e5642416754436b4e6862476c6d62334a7561574578466a415542674e564241635444564e68626942470a636d467559326c7a59323878486a416342674e5642416f5446584e68625842735a5739795a79356c654746746347786c4c6d4e76625445684d423847413155450a41784d5959324575633246746347786c62334a6e4c6d56345957317762475575593239744d423458445449774d4463774d7a45784d7a6b774d466f5844544d770a4d4463774d5445784d7a6b774d466f77627a454c4d416b474131554542684d4356564d78457a415242674e5642416754436b4e6862476c6d62334a75615745780a466a415542674e564241635444564e6862694247636d467559326c7a593238784454414c42674e56424173544248426c5a5849784a44416942674e5642414d540a4733426c5a5849774c6e4e68625842735a5739795a79356c654746746347786c4c6d4e766254425a4d424d4742797147534d34394167454743437147534d34390a417745484130494142414d39495156505671365849626c6b61522f6e4352457063665047327178712f304f7a31746c6b6e702b65557a6d4a7768505656454f390a475a6d744f66716741324c777251434c5775586c68734d7a793478744244576a5454424c4d41344741315564447745422f775145417749486744414d42674e560a48524d4241663845416a41414d437347413155644977516b4d434b41494964564a6c716f46575352514a3877376759572f6f74484235723447487238754977540a476a6566546977724d416f4743437147534d343942414d43413063414d45514349477276644276424c695865446e644d5250674855626f78434d6353733864790a394f565173423372626d6a68416941434c6f4c4a54556b33416233534971357970595843704f41477462566252754d37474c5a383972344332513d3d0a2d2d2d2d2d454e442043455254494649434154452d2d2d2d2d0a2a473045022100fa131a42345ce1c935e51ac2cea0bc6bdbe6303ada18bddd0da4179b734da84302204dbc8977d6b2abb74fc19efd0ab4db9dc306525acb3a9ea05b75527aa634c2fe';

  before(async () => {
    fabricCommitment = await FabricCommitment.new();
  });

  describe('call decode()', async () => {
    it('happy path', async () => {
      console.log(fabricCommitment.address);

      // refer to
      // https://ittone.ma/ittone/javascript-how-to-send-bytes-parameters-from-web3-js-to-solidity-contract/
      //  according to the above link, hexToBytes is not required to send
      // https://web3js.readthedocs.io/en/v1.5.0/web3-utils.html#hextobytes
      // const byteArray = web3.utils.hexToBytes(hexCommitment);
      // console.log(byteArray);

      const tx = await fabricCommitment.decode(hexCommitment, {
        from: accounts[0],
      });
      let resultArgs = findEvent(tx.logs, decodeEvent.KVRWsetHashedRWSets);
      if (resultArgs.data) {
        resultArgs.data.forEach((elem) => {
          console.log(`hashed_reads: ${elem.hashed_reads}`);
          console.log(`hashed_writes: ${elem.hashed_writes}`);
          console.log(`metadata_writes: ${elem.metadata_writes}`);
        });
      }

      resultArgs = findEvent(tx.logs, decodeEvent.MspIdentities);
      if (resultArgs.data) {
        resultArgs.data.forEach((elem) => {
          console.log(`mspid: ${elem.mspid}`);
          console.log(`id_bytes: ${elem.id_bytes}`);
        });
      }
    });
  });
});
